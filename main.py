import os
import logging
import asyncio
import random
import requests
from datetime import datetime, time, timedelta, timezone

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
OPENWEATHER_TOKEN = os.environ.get('OPENWEATHER_TOKEN')
ADMIN_ID = os.environ.get('ADMIN_ID')  # –¢–µ–ª–µ–≥—Ä–∞–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—á–∏—Å–ª–æ, –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º –≤–∏–¥–µ)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å ADMIN_ID)
    is_admin = False
    if ADMIN_ID:
        try:
            admin_id_int = int(ADMIN_ID)
        except:
            admin_id_int = None
        if admin_id_int and user_id == admin_id_int:
            is_admin = True

    if is_admin:
        # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        keyboard = [
            [KeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")],
            [KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
            reply_markup=reply_markup
        )
        # *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –ö–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑" –∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" ‚Äì –ø—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        # –ò—Ö –æ–±—Ä–∞–±–æ—Ç–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è –≤—Å–µ—Ö –∏–ª–∏ –ø–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏) –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ.
    else:
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äì –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∑–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞ (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω)
        if context.user_data.get("city"):
            city = context.user_data["city"]
            await update.message.reply_text(
                f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≥–æ—Ä–æ–¥–∞ *{city}* –≤ 7:00 —É—Ç—Ä–∞.",
                parse_mode="Markdown"
            )
        else:
            context.user_data["awaiting_city"] = True
            await update.message.reply_text(
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞."
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞)
async def handle_city_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥—ë–º –ª–∏ –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    if context.user_data.get("awaiting_city"):
        city_name = update.message.text.strip()
        # –í—ã–∑—ã–≤–∞–µ–º OpenWeather API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã (–∏ —Å–º–µ—â–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞)
        try:
            loop = asyncio.get_running_loop()
            response = await loop.run_in_executor(
                None,
                requests.get,
                f"https://api.openweathermap.org/data/2.5/weather?q={city_name}&units=metric&lang=ru&appid={OPENWEATHER_TOKEN}"
            )
            data = response.json()
        except Exception as e:
            logging.error(f"Error fetching weather: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–≥–æ–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç API: –∫–æ–¥ 200 –æ–∑–Ω–∞—á–∞–µ—Ç —É—Å–ø–µ—Ö (–≥–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω)
        if data.get("cod") != 200:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë —Ä–∞–∑."
            )
            return  # –æ—Å—Ç–∞—ë–º—Å—è –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞

        # –ì–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω ‚Äì —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —Å–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è
        city_name_ru = data.get("name", city_name)
        context.user_data["city"] = city_name_ru
        context.user_data["awaiting_city"] = False

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –≥–æ—Ä–æ–¥–∞ –ø–æ —Å–º–µ—â–µ–Ω–∏—é (timezone offset –≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        tz_offset = data.get("timezone", 0)
        user_tz = timezone(timedelta(seconds=tz_offset))

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞ 7:00 –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        job_name = f"daily_weather_{update.effective_user.id}"
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –±—ã–ª–∞, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å
        current_jobs = context.job_queue.get_jobs_by_name(job_name)
        for job in current_jobs:
            job.schedule_removal()
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é –∑–∞–¥–∞—á—É
        context.job_queue.run_daily(
            send_daily_weather,                   # —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
            time=time(7, 0, tzinfo=user_tz),      # –≤—Ä–µ–º—è 7:00 –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ user_tz
            days=(0, 1, 2, 3, 4, 5, 6),           # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            name=job_name,
            chat_id=update.effective_chat.id,
            user_id=update.effective_user.id
        )

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Å–ø–µ—à–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        await update.message.reply_text(
            f"–û—Ç–ª–∏—á–Ω–æ, *{city_name_ru}* —Å–æ—Ö—Ä–∞–Ω—ë–Ω! üåÜ\n"
            f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 7:00 —É—Ç—Ä–∞.",
            parse_mode="Markdown"
        )
    else:
        # –ù–∞ –ª—é–±–æ–π –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–∫–æ–≥–¥–∞ –≥–æ—Ä–æ–¥ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è) –±–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω—è–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º –≤ 7:00)
async def send_daily_weather(context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞—á–∏
    chat_id = context.job.chat_id            # ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    user_city = context.user_data.get("city")  # –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–∞–Ω–µ–µ
    if not user_city:
        return  # –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –∑–∞–¥–∞–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –ø–æ –≥–æ—Ä–æ–¥—É —á–µ—Ä–µ–∑ OpenWeather API
    try:
        loop = asyncio.get_running_loop()
        response = await loop.run_in_executor(
            None,
            requests.get,
            f"https://api.openweathermap.org/data/2.5/weather?q={user_city}&units=metric&lang=ru&appid={OPENWEATHER_TOKEN}"
        )
        weather = response.json()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è {user_city}: {e}")
        return

    if weather.get("cod") != 200:
        logging.error(f"OpenWeather API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ {user_city}: {weather.get('message')}")
        return

    # –†–∞–∑–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
    description = ""
    if weather.get("weather"):
        # –ù–∞–ø—Ä–∏–º–µ—Ä: "–ø–∞—Å–º—É—Ä–Ω–æ", "—è—Å–Ω–æ" –∏ —Ç.–¥. –î–µ–ª–∞–µ–º —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã.
        description = weather["weather"][0]["description"].capitalize()
    temp = weather["main"]["temp"]
    feels_like = weather["main"]["feels_like"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã
    weather_text = (
        f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ *{user_city}* —Å–µ–π—á–∞—Å: {description}\n"
        f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp:.1f}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like:.1f}¬∞C."
    )
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
    predictions = [
        "–°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π.",
        "–ó–≤—ë–∑–¥—ã –æ–±–µ—â–∞—é—Ç —Å–ø–æ–∫–æ–π–Ω—ã–π –¥–µ–Ω—å.",
        "–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –º–µ–ª–æ—á–∏ ‚Äì –≤ –Ω–∏—Ö –∫—Ä–æ–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ.",
        "–£–ª—ã–±–∞–π—Ç–µ—Å—å ‚Äî –∏ —É–¥–∞—á–∞ —É–ª—ã–±–Ω—ë—Ç—Å—è –≤–∞–º –≤ –æ—Ç–≤–µ—Ç!",
        "–•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ."
    ]
    prediction_text = random.choice(predictions)
    full_message = f"{weather_text}\n\nüîÆ *–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–Ω—è:* {prediction_text}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await context.bot.send_message(chat_id=chat_id, text=full_message, parse_mode="Markdown")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {e}")

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram Bot Application
    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    # (–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, /help)

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city_input))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–¥–æ–ª–≥–∏–π –æ–ø—Ä–æ—Å Telegram API)
    application.run_polling()

if __name__ == "__main__":
    main()
